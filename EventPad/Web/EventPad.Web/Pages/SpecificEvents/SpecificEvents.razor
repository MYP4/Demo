@page "/specific-events"

@using EventPad.Web.Pages.Events
@using EventPad.Web.Components
@using EventPad.Web.Pages.Profiles
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization

@inject ISpecificService SpecificService
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject IProfileService ProfileService

@attribute [Authorize]
@layout MainLayout

<PageTitle>SpecificEvents</PageTitle>
<MudContainer>
    <MudText Typo="Typo.h4" Class="ma-8">Events</MudText>
    <MudGrid>
        @foreach (var eventItem in EventList)
        {
            <MudItem xs="12" sm="6" md="3">
                <MudCard>
                    <MudCardMedia>
                        <MudIcon Icon="Icons.Material.Filled.Door" Size="Size.Large" />
                    </MudCardMedia>
                    <MudCardContent>
                        <MudText Typo="Typo.h5">@eventItem.Description</MudText>
                            <MudText Typo="Typo.body2">Ticket Count: @eventItem.TicketCount</MudText>
                            <MudText Typo="Typo.body2">Price: @eventItem.Price</MudText>
                            <MudText Typo="Typo.body2">Address: @eventItem.Address</MudText>
                            <MudText Typo="Typo.body2">Date: @eventItem.Date.ToString("d")</MudText>
                            <MudText Typo="Typo.body2">Day of Week: @eventItem.DayOfWeek.ToString()</MudText>
                            <MudText Typo="Typo.body2">Time: @eventItem.Time.ToString("t")</MudText>
                            <MudText Typo="Typo.body2">Private: @eventItem.Private</MudText>
                            <MudText Typo="Typo.body2">Code: @eventItem.Code</MudText>
                            <MudText Typo="Typo.body2">Rating: @eventItem.Rating</MudText>
                        </MudCardContent>
                    </MudCard>
                </MudItem>
        }
    </MudGrid>
</MudContainer>


@code {
    private IEnumerable<SpecificModel> EventList = new List<SpecificModel>();
    private string searchString = string.Empty;

    private async Task ReloadData()
    {
        EventList = await SpecificService.GetSpecifics();
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await ReloadData();
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }
}
 