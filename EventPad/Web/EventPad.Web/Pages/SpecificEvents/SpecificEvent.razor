@page "/specific/{id}"

@using EventPad.Web.Components
@using EventPad.Web.Pages.Events
@using EventPad.Web.Pages.Profiles
@using EventPad.Web.Pages.SpecificEvents
@using EventPad.Web.Pages.Tickets
@using EventPad.Web.Pages.Users
@using Microsoft.AspNetCore.Authorization

@inject IUserService userService;
@inject IEventService eventService
@inject ISpecificService specificService
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject IProfileService profileService
@inject ITicketService ticketService

@attribute [Authorize]
@layout MainLayout

<PageTitle>Event</PageTitle>

<MudContainer>
    <MudGrid>
        <MudItem xs="12" sm="12" md="12" lg="12" xl="12">
            <MudCard Elevation="2" Outlined="true">
                <MudCardContent>
                    <MudGrid>
                        <MudItem xs="12" sm="6" md="6" lg="6" xl="6">
                            <MudImage Src="@($"{Settings.ApiRoot}/{eventModel.Image}")" Height="400" Width="300" ObjectFit="ObjectFit.Cover" />
                        </MudItem>
                        <MudItem xs="12" sm="6" md="6" lg="6" xl="6">
                            <MudText Typo="Typo.h5" Class="mb-2">@specificModel.Description</MudText>
                                <MudText Typo="Typo.body2" Class="mb-2">Ticket Count: @specificModel.TicketCount</MudText>
                                <MudText Typo="Typo.body2" Class="mb-2">Price: @specificModel.Price</MudText>
                                <MudText Typo="Typo.body2" Class="mb-2">Address: @specificModel.Address</MudText>
                                <MudText Typo="Typo.body2" Class="mb-2">Date: @specificModel.Date?.ToString("d")</MudText>
                                <MudText Typo="Typo.body2" Class="mb-2">Day of Week: @specificModel.DayOfWeek?.ToString()</MudText>
                                <MudText Typo="Typo.body2" Class="mb-2">Time: @specificModel.Time?.ToString("t")</MudText>
                                @if (isOwner)
                            {
                                <MudText Typo="Typo.body2" Class="mb-2">Private: @specificModel.Private</MudText>
                                <MudText Typo="Typo.body2" Class="mb-2">Code: @specificModel.Code</MudText>
                            }
                            <MudText Typo="Typo.body2" Class="mb-2">Rating: @specificModel.Rating</MudText>
                            </MudItem>
                        </MudGrid>
                    </MudCardContent>
                    @if (isOwner)
                {
                    <MudCardActions>
                        <MudButton Color="Color.Primary" Variant="Variant.Text" OnClick="EditSpecificModel">Edit</MudButton>
                        <MudButton Color="Color.Secondary" Variant="Variant.Text" OnClick="DeleteSpecificModel">Delete</MudButton>
                    </MudCardActions>
                }
            </MudCard>
        </MudItem>
    </MudGrid>
</MudContainer>

<MudContainer>
    <MudGrid>
        <MudItem xs="12" sm="12" md="12" lg="12" xl="12" Class="d-flex justify-content-center">
            <MudButton Color="Color.Primary" Variant="Variant.Text" OnClick="BuyTicket">Buy ticket</MudButton>
        </MudItem>
    </MudGrid>
</MudContainer>
<MudContainer>
    <MudGrid>
        <MudItem xs="12" sm="12" md="12" lg="12" xl="12">
            <SpecificTickets specificId="specificModel.Id"></SpecificTickets>
        </MudItem>
    </MudGrid>
</MudContainer>


@code {
    private SpecificModel specificModel;
    private EventModel eventModel;
    private bool isOwner = false;

    [Parameter]
    public string id { get; set; }


    private async Task ReloadData()
    {
        var specificId = Guid.Parse(id);
        specificModel = await specificService.GetSpecific(specificId);
        eventModel = await eventService.GetEvent(specificModel.EventId);
        await IsOwner();
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await ReloadData();
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }

    private async Task IsOwner()
    {
        var user = await profileService.Me();
        var eventModel = await eventService.GetEvent(specificModel.EventId);
        var eventAdmin = await userService.GetUser(eventModel.AdminId);

        if (user.Id == eventAdmin.Id)
            isOwner = true;
        else isOwner = false;
    }

    private void BuyTicket()
    {
        ticketService.AddTicket(new Tickets.CreateModel() { SpecificId = specificModel.Id });
    }

    private void EditSpecificModel()
    {
        // Implementation for editing the event
    }

    private void DeleteSpecificModel()
    {
        // Implementation for deleting the event
    }
}