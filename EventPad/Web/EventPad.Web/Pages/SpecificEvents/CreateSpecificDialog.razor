@* @using EventPad.Web.Pages.Events
@using EventPad.Web.Pages.Users


@inherits MudComponentBase

@inject IUserService userService
@inject ISpecificService specificService


<MudDialog @ref="form" Title="Create Event" MaxWidth="MaxWidth.Large" FullWidth="true">
    <DialogContent>
        <MudTextField Label="Description" @bind-Value="Model.Description"/>
        <MudTextField Label="Ticket Count" @bind-Value="Model.TicketCount.ToString()" />
        <MudTextField Label="Price" @bind-Value="Model.Price.ToString()" />
        <MudTextField Label="Address" @bind-Value="Model.Address" />
        <MudDatePicker Label="Date" @bind-Date="Model.Date"/>
        <MudSelect Label="Day of Week" @bind-Value="Model.DayOfWeek">
            @foreach (var day in Enum.GetValues(typeof(DayOfWeek)))
            {
                <MudSelectItem Value="@day">@day</MudSelectItem>
            }
        </MudSelect>
        <MudTimePicker Label="Time" @bind-Time="Model.Time" />
        <MudSwitch Label="Private" @bind-Checked="Model.Private" />
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton OnClick="Submit" Color="Color.Primary">Create</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; } = default!;
    [Parameter] public Guid? EventId { get; set; }
    Variant Model = new SpecificModel();

    private MudForm form = default!;

    MudSelect<Guid> selectOwner = default!;
    private List<UserModel> Owners { get; set; } = new List<UserModel>();

    protected override async Task OnInitializedAsync()
    {
        var owners = await userService.GetUsers();

        Owners.AddRange(owners);

        if (EventId != null)
        {
            var model = await specificService.GetSpecific(EventId.Value);

            Model.Id = model.Id;
            Model.Name = model.Name;
            Model.Description = model.Description;
            Model.Price = model.Price;
            Model.Address = model.Address;
            Model.Type = model.Type;
            Model.Rating = model.Rating;
            Model.AdminId = model.AdminId;
            Model.AdminName = model.AdminName;
        }
    }

    async Task Submit()
    {
        await form.Validate();
        if (form.IsValid)
        {
            MudDialog.Close(DialogResult.Ok(true));
        }
    }

    void Cancel() => MudDialog.Cancel();
} *@