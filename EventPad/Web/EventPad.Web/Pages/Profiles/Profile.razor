@page "/profile"

@using EventPad.Web.Common.Files
@using EventPad.Web.Components
@using EventPad.Web.Pages.Events
@using EventPad.Web.Pages.Profiles
@using EventPad.Web.Pages.Tickets
@using EventPad.Web.Pages.Users
@using Microsoft.AspNetCore.Authorization


@inject IEventService EventService
@inject IProfileService ProfileService
@inject IUserService UserService
@inject IEventService EventService
@inject ISnackbar Snackbar
@inject IDialogService DialogService

@attribute [Authorize]
@layout MainLayout

<PageTitle>Profile</PageTitle>

@if (profileModel != null)
{
        <MudContainer>
        <MudGrid>
            <MudItem xs="12" sm="12" md="12" lg="12" xl="12">
                <MudCard Elevation="2" Outlined="true">
                    <MudCardContent>
                        <MudGrid>
                            <MudItem xs="12" sm="6" md="6" lg="6" xl="6">
                                <MudImage Src="@($"{Settings.ApiRoot}/{profileModel.Image}")" Height="400" Width="300" ObjectFit="ObjectFit.Cover" />
                            </MudItem>
                            <MudItem xs="12" sm="6" md="6" lg="6" xl="6">
                                <MudText Typo="Typo.h5" Class="mb-2">@profileModel.FirstName @profileModel.SecondName</MudText>
                                <MudText Typo="Typo.body2" Class="mb-2">Email: @profileModel.Email</MudText>
                                <MudText Typo="Typo.body2" Class="mb-2">Account Number: @profileModel.AccountNumber</MudText>
                                <MudText Typo="Typo.body2" Class="mb-2">Balance: @profileModel.Balance</MudText>
                            </MudItem>
                        </MudGrid>
                    </MudCardContent>
                    <MudCardActions>
                        <MudButton Color="Color.Primary" Variant="Variant.Text" OnClick="EditProfile">Edit Profile</MudButton>
                        <MudButton Color="Color.Secondary" Variant="Variant.Text" OnClick="DeleteProfile">Delete Profile</MudButton>
                    </MudCardActions>
                </MudCard>
            </MudItem>
        </MudGrid>
    </MudContainer>

    <UserEvents></UserEvents>
    <UserTickets></UserTickets>
}


@code {
    private ProfileModel profileModel;
    private Guid profileId;

    private async Task ReloadData()
    {
        profileModel = await ProfileService.Me();
        profileId = profileModel.Id;
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await ReloadData();
        }
        catch (Exception ex)
        {
            //Snackbar.Add(ex.Message, Severity.Error);
        }
    }

    private async void EditProfile()
    {
        var parameters = new DialogParameters();
        parameters.Add("UserId", profileId);

        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Large, FullWidth = true };
        var dialog = DialogService.Show<ProfileDialog>("Edit Profile", parameters, options);
        var result = await dialog.Result;

        if (result.Canceled)
            return;

        FilePayload image = null;
        if (((ProfileDialog)dialog.Dialog).file != null)
        {
            var file = ((ProfileDialog)dialog.Dialog).file;
            var buffer = new byte[file.Size];

            await file.OpenReadStream(int.MaxValue).ReadAsync(buffer);
            var content = Convert.ToBase64String(buffer);

            image = new FilePayload()
            {
                FileName = file.Name,
                Content = content
            };
        }
        var model = ((ProfileDialog)dialog.Dialog).Model;
        var updateModel = new UpdateProfileModel()
            {
                FirstName = model.FirstName,
                SecondName = model.SecondName,
                Image = image
            };

        await UserService.EditUser(profileId, updateModel);
        await ReloadData();
    }

    private async void DeleteProfile()
    {
        var parameters = new DialogParameters();
        parameters.Add("ContentText", "Do you really want to delete profile? This process cannot be undone.");
        parameters.Add("ButtonText", "Delete");
        parameters.Add("Color", Color.Error);

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        var dialog = await DialogService.ShowAsync<ConfirmationDialog>("Delete profile", parameters, options);
        var result = await dialog.Result;

        if (result.Canceled)
            return;

        await UserService.DeleteUser(profileId);
        await ReloadData();
    }
}
