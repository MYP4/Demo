@page "/register"

@using EventPad.Web.Pages.Auth
@using EventPad.Web.Pages.Events
@using EventPad.Web.Pages.Profiles
@using Microsoft.AspNetCore.Authorization
@using System.ComponentModel.DataAnnotations

@attribute [AllowAnonymous]

@layout SimpleLayout

@inject IProfileService profileService;
@inject IAuthService authService;
@inject NavigationManager navigationManager




<MudGrid Justify="Justify.Center" Class="pa-10">
    <MudItem xs="7" sm="4">
        <MudPaper Class="pa-4">
            <EditForm Model="@model" OnValidSubmit="OnValidSubmit">
                <DataAnnotationsValidator />
                <MudGrid>
                    <MudItem xs="12" sm="7">
                        <MudCard>
                            <MudCardContent>
                                <MudTextField Label="First name" 
                                              @bind-Value="model.FirstName" For="@(() => model.FirstName)" />
                                <MudTextField Label="Last name" 
                                              @bind-Value="model.SecondName" For="@(() => model.SecondName)" />
                                <MudTextField Label="Email" Class="mt-3"
                                              @bind-Value="model.Email" For="@(() => model.Email)" />
                                <MudTextField Label="Password" HelperText="Choose a strong password" Class="mt-3"
                                              @bind-Value="model.Password" For="@(() => model.Password)" InputType="passwordInput" />
                                <MudIconButton Icon="@passwordInputIcon" OnClick="TogglePasswordVisibility" Class="ml-auto" />
                            </MudCardContent>
                            <MudCardActions>
                                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Register</MudButton>
                            </MudCardActions>
                        </MudCard>
                    </MudItem>
                    <MudItem xs="12" sm="5">
                        <MudPaper Class="pa-4 mud-height-full">
                            <MudText Typo="Typo.subtitle2">Validation Summary</MudText>
                            @if (showErrors)
                            {
                                <MudText Color="Color.Error">
                                    @foreach (var error in errors)
                                    {
                                        <p>@error</p>
                                    }
                                </MudText>
                            }
                            else if (success)
                            {
                                <MudText Color="Color.Success">Success</MudText>
                            }
                        </MudPaper>
                    </MudItem>
                    <MudItem xs="12">
                        <MudText Typo="Typo.body2" Align="Align.Center">
                            Fill out the form correctly to see the success message.
                        </MudText>
                    </MudItem>
                </MudGrid>
            </EditForm>
        </MudPaper>
    </MudItem>
</MudGrid>

@code {
    private RegisterModel model = new();

    private bool success;
    private bool passwordVisibility;
    private InputType passwordInput = InputType.Password;
    private string passwordInputIcon = Icons.Material.Filled.VisibilityOff;

    private List<string> errors = new();
    private bool showErrors;

    void TogglePasswordVisibility()
    {
        if (passwordVisibility)
        {
            passwordVisibility = false;
            passwordInput = InputType.Password;
            passwordInputIcon = Icons.Material.Filled.VisibilityOff;
        }
        else
        {
            passwordVisibility = true;
            passwordInput = InputType.Text;
            passwordInputIcon = Icons.Material.Filled.Visibility;
        }
    }

    private async Task OnValidSubmit()
    {
        showErrors = false;
        success = true;
        errors.Clear();

        try
        {
            await authService.Register(model);
            navigationManager.NavigateTo("/login");
        }
        catch (Exception ex)
        {
            errors = ex.Message.Split(", ").ToList();
            showErrors = true;
            success = false;
        }
    }
}



