@using EventPad.Web.Pages.Events
@using EventPad.Web.Components
@using EventPad.Web.Pages.Profiles
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization

@inject IEventService EventService
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject IProfileService ProfileService

@attribute [Authorize]
@layout MainLayout

<PageTitle>Your events</PageTitle>

<MudContainer>
    <MudText Typo="Typo.h4" Class="ma-8">UserEvents</MudText>
    <MudGrid>
        @foreach (var eventItem in EventList)
        {
            <MudItem xs="12" sm="6" md="3">
                <MudNavLink Href="@($"/event/{eventItem.Id}")">
                <MudCard>
                    <MudCardMedia>
                        <MudIcon Icon="Icons.Material.Filled.Door" Size="Size.Large" />
                    </MudCardMedia>
                    <MudCardContent>
                        <MudText Typo="Typo.h5">@eventItem.Name</MudText>
                            <MudText Typo="Typo.body2">@eventItem.Description</MudText>
                            <MudText Typo="Typo.body2">Price: @eventItem.Price</MudText>
                            <MudText Typo="Typo.body2">Address: @eventItem.Address</MudText>
                            <MudText Typo="Typo.body2">Type: @eventItem.Type</MudText>
                            <MudText Typo="Typo.body2">Rating: @eventItem.Rating</MudText>
                        </MudCardContent>
                        @if (isOwner)
                        {
                        <MudCardActions>
                            <MudButton Color="Color.Primary" OnClick="@(() => EditEvent(eventItem.Id))">Edit</MudButton>
                            <MudButton Color="Color.Secondary" OnClick="@(() => DeleteEvent(eventItem.Id))">Delete</MudButton>
                        </MudCardActions>
                        }
                </MudCard>
                </MudNavLink>
            </MudItem>
        }
    </MudGrid>
</MudContainer>



@code {
    private IEnumerable<EventModel> EventList = new List<EventModel>();
    private string searchString = string.Empty;
    private bool isOwner = false;

    private async Task ReloadData()
    {
        EventList = await EventService.GetUserEvents();

        isOwner = await IsOwner(EventList.First().AdminId);
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await ReloadData();
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }

    private async Task<bool> IsOwner(Guid adminId)
    {
        var user = await ProfileService.Me();

        if (user.Id == adminId)
            return true;

        return false;
    }

    private async Task AddEvent()
    {
        var parameters = new DialogParameters { };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Large, FullWidth = true };

        var dialog = await DialogService.ShowAsync<EventDialog>("Add Event", parameters, options);
        var result = await dialog.Result;

        if (result.Canceled)
            return;

        try
        {
            var model = ((EventDialog)dialog.Dialog).Model;

            var createModel = new CreateModel()
                {
                    Name = model.Name,
                    Description = model.Description,
                    Price = model.Price,
                    Address = model.Address,
                    Type = model.Type,
                    AdminId = model.AdminId
                };

            await EventService.AddEvent(createModel);
            await ReloadData();
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }

    private async Task EditEvent(Guid eventId)
    {
        var parameters = new DialogParameters();
        parameters.Add("EventId", eventId);

        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Large, FullWidth = true };
        var dialog = DialogService.Show<EventDialog>("Edit Event", parameters, options);
        var result = await dialog.Result;

        if (result.Canceled)
            return;

        var model = ((EventDialog)dialog.Dialog).Model;
        var updateModel = new UpdateModel()
            {
                Name = model.Name,
                Description = model.Description,
                Price = model.Price,
                Address = model.Address,
                Type = model.Type
            };

        await EventService.EditEvent(eventId, updateModel);
        await ReloadData();
    }

    private async Task DeleteEvent(Guid eventId)
    {
        var parameters = new DialogParameters();
        parameters.Add("ContentText", "Do you really want to delete this Event? This process cannot be undone.");
        parameters.Add("ButtonText", "Delete");
        parameters.Add("Color", Color.Error);

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        var dialog = await DialogService.ShowAsync<ConfirmationDialog>("Delete Event", parameters, options);
        var result = await dialog.Result;

        if (result.Canceled)
            return;

        await EventService.DeleteEvent(eventId);
        await ReloadData();
    }
}
