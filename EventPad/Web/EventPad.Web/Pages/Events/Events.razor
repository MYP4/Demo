@page "/events"

@using EventPad.Web.Pages.Events.Services
@using EventPad.Web.Pages.Events.Models
@using EventPad.Web.Components
@using Microsoft.AspNetCore.Authorization

@inject IEventService EventService
@inject ISnackbar Snackbar
@inject IDialogService DialogService

@attribute [Authorize]
@layout MainLayout

<PageTitle>Events</PageTitle>

<MudText Typo="Typo.h4" Class="ma-8">Events</MudText>

<MudTable Items="@EventList" Class="ma-8">
    <ColGroup>
        <col style="width:50px;" />
        <col />
        <col />
        <col />
        <col style="width:100px;" />
    </ColGroup>
    <ToolBarContent>
        <MudButton StartIcon="@Icons.Material.Filled.Add" Variant="Variant.Filled" Color="Color.Primary" OnClick="AddEvent">Add</MudButton>
        <MudSpacer />
        <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Name</MudTh>
        <MudTh>Admin</MudTh>
        <MudTh>Description</MudTh>
        <MudTh>Price</MudTh>
        <MudTh>Address</MudTh>
        <MudTh>Type</MudTh>
        <MudTh>Rating</MudTh>
        <MudTh></MudTh>
    </HeaderContent>
    <RowTemplate>
            <MudTd DataLabel="Name">@context.Name</MudTd>
            <MudTd DataLabel="Admin">@context.AdminName</MudTd>
            <MudTd DataLabel="Description">@context.Description</MudTd>
            <MudTd DataLabel="Price">@context.Price</MudTd>
            <MudTd DataLabel="Address">@context.Address</MudTd>
            <MudTd DataLabel="Type">@context.Type</MudTd>
            <MudTd DataLabel="Rating">@context.Rating</MudTd>
            <MudTd>
                <MudIconButton Icon="@Icons.Material.Filled.Edit" Variant="Variant.Outlined" Color="Color.Primary" Size="Size.Small" OnClick="() => EditEvent(context.Id)" />
                <MudIconButton Icon="@Icons.Material.Filled.Delete" Variant="Variant.Outlined" Color="Color.Primary" Size="Size.Small" OnClick="() => DeleteEvent(context.Id)" />
            </MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>

    @code {
    private IEnumerable<EventModel> EventList = new List<EventModel>();
    private string searchString = string.Empty;

    private async Task ReloadData()
    {
        EventList = await EventService.GetEvents();
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await ReloadData();
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }

    private async Task AddEvent()
    {
        var parameters = new DialogParameters { };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Large, FullWidth = true };

        var dialog = await DialogService.ShowAsync<EventDialog>("Add Event", parameters, options);
        var result = await dialog.Result;

        if (result.Canceled)
            return;

        try
        {
            var model = ((EventDialog)dialog.Dialog).Model;

            var createModel = new CreateModel()
            {
                    Name = model.Name,
                    Description = model.Description,
                    Price = model.Price,
                    Address = model.Address,
                    Type = model.Type,
                    AdminId = model.AdminId
            };

            await EventService.AddEvent(createModel);
            await ReloadData();
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }

    private async Task EditEvent(Guid eventId)
    {
        var parameters = new DialogParameters();
        parameters.Add("EventId", eventId);

        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Large, FullWidth = true };
        var dialog = DialogService.Show<EventDialog>("Edit Event", parameters, options);
        var result = await dialog.Result;

        if (result.Canceled)
            return;

        var model = ((EventDialog)dialog.Dialog).Model;
        var updateModel = new UpdateModel()
        {
            Name = model.Name,
            Description = model.Description,
            Price = model.Price,
            Address = model.Address,
            Type = model.Type
        };

        await EventService.EditEvent(eventId, updateModel);
        await ReloadData();
    }

    private async Task DeleteEvent(Guid eventId)
    {
        var parameters = new DialogParameters();
        parameters.Add("ContentText", "Do you really want to delete this Event? This process cannot be undone.");
        parameters.Add("ButtonText", "Delete");
        parameters.Add("Color", Color.Error);

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        var dialog = await DialogService.ShowAsync<ConfirmationDialog>("Delete Event", parameters, options);
        var result = await dialog.Result;

        if (result.Canceled)
            return;

        await EventService.DeleteEvent(eventId);
        await ReloadData();
    }
}
