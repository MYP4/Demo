@page "/events"

@using EventPad.Web.Pages.Events
@using EventPad.Web.Components
@using EventPad.Web.Pages.Profiles
@using EventPad.Web.Pages.SpecificEvents
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization

@inject IEventService EventService
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject IProfileService ProfileService
@inject ISpecificService specificService
@inject NavigationManager navigationManager

@attribute [Authorize]
@layout MainLayout

<PageTitle>Events</PageTitle>

<MudContainer>
    <MudText Typo="Typo.h4" Class="ma-8">Events</MudText>
    <MudGrid>
        <MudItem xs="12">
            <MudTextField Label="Search by Code" @bind-Value="SearchTerm" Class="ma-4" />
            <MudButton Color="Color.Primary" Variant="Variant.Text" OnClick="FindByCode" Class="ma-4">Search</MudButton>
        </MudItem>
        @foreach (var eventItem in EventList)
        {
            <MudItem xs="12" sm="6" md="3">
                <MudNavLink Href="@($"/event/{eventItem.Id}")" Class="center-link">
                    <MudCard>
                        <MudImage Src="@($"{Settings.ApiRoot}/{eventItem.Image}")" Height="400" Width="300" ObjectFit="ObjectFit.Cover" />
                        <MudCardContent>
                            <MudText Typo="Typo.h5">@eventItem.Name</MudText>
                                <MudText Typo="Typo.body2">@eventItem.Description</MudText>
                                @* <MudText Typo="Typo.body2">Price: @eventItem.Price</MudText> *@
                                <MudText Typo="Typo.body2">Address: @eventItem.Address</MudText>
                                <MudText Typo="Typo.body2">Owner: @eventItem.AdminName</MudText>
                                <MudText Typo="Typo.body2">Type: @eventItem.Type</MudText>
                                <MudText Typo="Typo.body2">Rating: @eventItem.Rating</MudText>
                            </MudCardContent>
                        </MudCard>
                    </MudNavLink>
                </MudItem>
        }
    </MudGrid>
</MudContainer>


@code {
    private IEnumerable<EventModel> EventList = new List<EventModel>();
    private string SearchTerm { get; set; }

    private async Task ReloadData()
    {
        EventList = await EventService.GetEvents();
    }

    private async Task FindByCode()
    {
        var specific = await specificService.GetSpecificByCode(SearchTerm);

        if (specific != null)
        {
            navigationManager.NavigateTo($"/specific/{specific.Id}");
        }
        else
        {
            Snackbar.Add("Current event don't exists", Severity.Error);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await ReloadData();
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }
} 

