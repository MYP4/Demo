@page "/events"

@using EventPad.Web.Pages.Events
@using EventPad.Web.Components
@using EventPad.Web.Pages.Profiles
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization

@inject IEventService EventService
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject IProfileService ProfileService

@attribute [Authorize]
@layout MainLayout

<PageTitle>Events</PageTitle>

<MudContainer>
    <MudText Typo="Typo.h4" Class="ma-8">Events</MudText>
    <MudGrid>
        @foreach (var eventItem in EventList)
        {
            <MudItem xs="12" sm="6" md="3">
                <MudNavLink Href="@($"/event/{eventItem.Id}")">
                    <MudCard>
                        <MudImage Src="@($"{Settings.ApiRoot}/{eventItem.Image}")" Height="400" Width="300"/>
                        <MudCardContent>
                            <MudText Typo="Typo.h5">@eventItem.Name</MudText>
                                <MudText Typo="Typo.body2">@eventItem.Description</MudText>
                                <MudText Typo="Typo.body2">Price: @eventItem.Price</MudText>
                                <MudText Typo="Typo.body2">Address: @eventItem.Address</MudText>
                                <MudText Typo="Typo.body2">Owner: @eventItem.AdminName</MudText>
                                <MudText Typo="Typo.body2">Type: @eventItem.Type</MudText>
                                <MudText Typo="Typo.body2">Rating: @eventItem.Rating</MudText>
                            </MudCardContent>
                        </MudCard>
                    </MudNavLink>
                </MudItem>
        }
    </MudGrid>
</MudContainer>



@code {
    private IEnumerable<EventModel> EventList = new List<EventModel>();


    private async Task ReloadData()
    {
        EventList = await EventService.GetEvents();
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await ReloadData();
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }


    private async Task AddEvent()
    {
        var parameters = new DialogParameters { };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Large, FullWidth = true };

        var dialog = await DialogService.ShowAsync<EventDialog>("Add Event", parameters, options);
        var result = await dialog.Result;

        if (result.Canceled)
            return;

        try
        {
            var model = ((EventDialog)dialog.Dialog).Model;

            var createModel = new CreateModel()
                {
                    Name = model.Name,
                    Description = model.Description,
                    Price = model.Price,
                    Address = model.Address,
                    Type = model.Type,
                    AdminId = model.AdminId
                };

            await EventService.AddEvent(createModel);
            await ReloadData();
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }
}

