@page "/events"

@using EventPad.Web.Pages.Events
@using EventPad.Web.Components
@using EventPad.Web.Pages.Profiles
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization

@inject IEventService EventService
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject IProfileService ProfileService

@attribute [Authorize]
@layout MainLayout

<PageTitle>Events</PageTitle>

<MudContainer>
    <MudText Typo="Typo.h4" Class="ma-8">Events</MudText>
    <MudGrid>
        @foreach (var eventItem in EventList)
        {
            <MudItem xs="12" sm="6" md="3">
                <MudNavLink Href="@($"/event/{eventItem.Id}")">
                <MudCard>
                    <MudCardMedia>
                        <MudIcon Icon="Icons.Material.Filled.Door" Size="Size.Large" />
                    </MudCardMedia>
                    <MudCardContent>
                        <MudText Typo="Typo.h5">@eventItem.Name</MudText>
                        <MudText Typo="Typo.body2">@eventItem.Description</MudText>
                        <MudText Typo="Typo.body2">Price: @eventItem.Price</MudText>
                        <MudText Typo="Typo.body2">Address: @eventItem.Address</MudText>
                        <MudText Typo="Typo.body2">Owner: @eventItem.AdminName</MudText>
                        <MudText Typo="Typo.body2">Type: @eventItem.Type</MudText>
                        <MudText Typo="Typo.body2">Rating: @eventItem.Rating</MudText>
                    </MudCardContent>
                </MudCard>
                </MudNavLink>
            </MudItem>
        }
    </MudGrid>
</MudContainer>



@code {
    private IEnumerable<EventModel> EventList = new List<EventModel>();
    private string searchString = string.Empty;

    private async Task ReloadData()
    {
        EventList = await EventService.GetEvents();
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await ReloadData();
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }

    private async Task AddEvent()
    {
        var parameters = new DialogParameters { };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Large, FullWidth = true };

        var dialog = await DialogService.ShowAsync<EventDialog>("Add Event", parameters, options);
        var result = await dialog.Result;

        if (result.Canceled)
            return;

        try
        {
            var model = ((EventDialog)dialog.Dialog).Model;

            var createModel = new CreateModel()
            {
                    Name = model.Name,
                    Description = model.Description,
                    Price = model.Price,
                    Address = model.Address,
                    Type = model.Type,
                    AdminId = model.AdminId
            };

            await EventService.AddEvent(createModel);
            await ReloadData();
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }
}
 



@* <MudContainer>
    <MudText Typo="Typo.h4" Class="ma-8">Events</MudText>

    <MudGrid>
        <MudItem xs="12" sm="6" md="3">
            <MudTextField Label="Search" @bind-Value="searchString" FullWidth="true" OnInput="ReloadData" />
        </MudItem>
    </MudGrid>

    <MudGrid>
        @foreach (var eventItem in EventList.Where(e => e.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase)))
        {
            <MudItem xs="12" sm="6" md="3">
                <MudCard>
                    <MudCardMedia Image="images/door.jpg" Height="200" />
                    <MudCardContent>
                        <MudText Typo="Typo.h5">@eventItem.Name</MudText>
                            <MudText Typo="Typo.body2">@eventItem.Description</MudText>
                            <MudText Typo="Typo.body2">Price: @eventItem.Price</MudText>
                            <MudText Typo="Typo.body2">Address: @eventItem.Address</MudText>
                            <MudText Typo="Typo.body2">Type: @eventItem.Type</MudText>
                        </MudCardContent>
                        <MudCardActions>
                            <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="() => EditEvent(eventItem.Id)">Edit</MudButton>
                            <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="() => DeleteEvent(eventItem.Id)">Delete</MudButton>
                        </MudCardActions>
                    </MudCard>
                </MudItem>
        }
    </MudGrid>

    <MudButton Color="Color.Primary" Variant="Variant.Outlined" Class="ma-4" OnClick="AddEvent">Add Event</MudButton>
</MudContainer>

@code {
    private IEnumerable<EventModel> EventList = new List<EventModel>();
    private string searchString = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await ReloadData();
    }

    private async Task AddEvent()
    {
        var parameters = new DialogParameters();
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Large, FullWidth = true };

        var dialog = await DialogService.ShowAsync<EventDialog>("Add Event", parameters, options);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            await ReloadData();
        }
    }

    private async Task EditEvent(Guid eventId)
    {
        var parameters = new DialogParameters();
        parameters.Add("EventId", eventId);

        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Large, FullWidth = true };
        var dialog = await DialogService.ShowAsync<EventDialog>("Edit Event", parameters, options);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            await ReloadData();
        }
    }

    private async Task DeleteEvent(Guid eventId)
    {
        var parameters = new DialogParameters();
        parameters.Add("ContentText", "Do you really want to delete this Event? This process cannot be undone.");
        parameters.Add("ButtonText", "Delete");
        parameters.Add("Color", Color.Error);

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        var dialog = await DialogService.ShowAsync<ConfirmationDialog>("Delete Event", parameters, options);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            await EventService.DeleteEvent(eventId);
            await ReloadData();
        }
    }

    private async Task ReloadData()
    {
        EventList = await EventService.GetEvents();
    }
} *@