@page "/event/{id}"

@using EventPad.Web.Common.Files
@using EventPad.Web.Components
@using EventPad.Web.Pages.Events
@using EventPad.Web.Pages.Profiles
@using EventPad.Web.Pages.SpecificEvents
@using EventPad.Web.Pages.Users
@using Microsoft.AspNetCore.Authorization


@inject IUserService UserService;
@inject IProfileService ProfileService;
@inject IEventService EventService
@inject ISpecificService SpecificService
@inject ISnackbar Snackbar
@inject IDialogService DialogService

@attribute [Authorize]
@layout MainLayout

<PageTitle>Event</PageTitle>

@if (eventModel != null)
{
<MudContainer>
        <MudGrid>
            <MudItem xs="12" sm="12" md="12" lg="12" xl="12">
                <MudCard Elevation="2" Outlined="true">
                    <MudCardContent>
                        <MudGrid>
                            <MudItem xs="12" sm="6" md="6" lg="6" xl="6">
                                <MudImage Src="@($"{Settings.ApiRoot}/{eventModel.Image}")" Height="400" Width="300" ObjectFit="ObjectFit.Cover" />
                            </MudItem>
                            <MudItem xs="12" sm="6" md="6" lg="6" xl="6">
                                <MudText Typo="Typo.h5" Class="mb-2">@eventModel.Name</MudText>
                                    <MudText Typo="Typo.body2" Class="mb-2">Description: @eventModel.Description</MudText>
                                    @* <MudText Typo="Typo.body2" Class="mb-2">Price: @eventModel.Price</MudText> *@
                                    <MudText Typo="Typo.body2" Class="mb-2">Address: @eventModel.Address</MudText>
                                    <MudText Typo="Typo.body2" Class="mb-2">Type: @eventModel.Type</MudText>
                                    <MudText Typo="Typo.body2" Class="mb-2">Rating: @eventModel.Rating</MudText>
                                    <MudText Typo="Typo.body2" Class="mb-2">Admin: @eventModel.AdminName</MudText>
                                </MudItem>
                            </MudGrid>
                        </MudCardContent> 
                        @if (isOwner)
                    {
                        <MudCardActions>
                            <MudButton Color="Color.Primary" Variant="Variant.Text" OnClick="() => EditEvent(eventModel.Id)">Edit</MudButton>
                            <MudButton Color="Color.Secondary" Variant="Variant.Text" OnClick="() => DeleteEvent(eventModel.Id)">Delete</MudButton>
                            <MudButton Color="Color.Info" Variant="Variant.Text" OnClick="CreateSpecificEvent">Create Specific</MudButton>
                        </MudCardActions>
                    }
                </MudCard>
        </MudItem>
    </MudGrid>
</MudContainer>

<EventSpecifics EventId="eventModel.Id"></EventSpecifics> 
}

@code {
    private EventModel eventModel;
    private bool isOwner;

    [Parameter]
    public string id { get; set; }


    private async Task ReloadData()
    {
        var eventId = Guid.Parse(id);
        eventModel = await EventService.GetEvent(eventId);
        IsOwner();
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await ReloadData();
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }

    private async void IsOwner()
    {
        var user = await ProfileService.Me();
        var eventAdmin = await UserService.GetUser(eventModel.AdminId);

        if (user.Id == eventAdmin.Id)
            isOwner = true;
        else isOwner = false;
    }

    private async void EditEvent(Guid eventId)
    {
        var parameters = new DialogParameters();
        parameters.Add("EventId", eventId);

        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Large, FullWidth = true };
        var dialog = DialogService.Show<EventDialog>("Edit Event", parameters, options);
        var result = await dialog.Result;

        if (result.Canceled)
            return;

        var file = ((EventDialog)dialog.Dialog).file;
        var buffer = new byte[file.Size];

        await file.OpenReadStream(int.MaxValue).ReadAsync(buffer);
        var content = Convert.ToBase64String(buffer);

        var model = ((EventDialog)dialog.Dialog).Model;
        var updateModel = new UpdateModel()
            {
                Name = model.Name,
                Description = model.Description,
                Price = model.Price,
                Address = model.Address,
                Type = model.Type,
                Image = new FilePayload()
                {
                    FileName = file.Name,
                    Content = content
                }
            };

        await EventService.EditEvent(eventId, updateModel);
        await ReloadData();
    }

    private async void DeleteEvent(Guid eventId)
    {
        var parameters = new DialogParameters();
        parameters.Add("ContentText", "Do you really want to delete this Event? This process cannot be undone.");
        parameters.Add("ButtonText", "Delete");
        parameters.Add("Color", Color.Error);

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        var dialog = await DialogService.ShowAsync<ConfirmationDialog>("Delete Event", parameters, options);
        var result = await dialog.Result;

        if (result.Canceled)
            return;

        await EventService.DeleteEvent(eventId);
        await ReloadData();
    }


    private async Task CreateSpecificEvent()
    {
        var parameters = new DialogParameters { };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Large, FullWidth = true };

        var dialog = await DialogService.ShowAsync<EventDialog>("Add Specific", parameters, options);
        var result = await dialog.Result;

        if (result.Canceled)
            return;

        try
        {
            var model = ((SpecificDialog)dialog.Dialog).Model;

            var createModel = new CreateSpecificModel()
                {
                    Description = model.Description,
                    TicketCount = model.TicketCount,
                    Price = model.Price,
                    Address = model.Address,
                    Date = model.Date,
                    DayOfWeek = model.DayOfWeek,
                    Time = model.Time,
                    Private = model.Private,
                };

            await SpecificService.AddSpecific(createModel);
            await ReloadData();
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }
}