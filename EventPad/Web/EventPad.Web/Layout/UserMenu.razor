@using EventPad.Web.Pages.Profiles
@using EventPad.Web.Pages.Users
@using Microsoft.AspNetCore.Components.Authorization

@inject IUserService userService
@inject NavigationManager navigationManager
@inject IProfileService profileService
@inject AuthenticationStateProvider authenticationStateProvider
@inject ISnackbar Snackbar

@if (IsAuthenticated)
{
    <MudNavMenu Color="Color.Inherit" Icon="@Icons.Material.Filled.Face" AnchorOrigin="Origin.BottomRight">
        @* <MudNavLink Href="/profile" Match="NavLinkMatch.All">Profile</MudNavLink> *@

        <MudNavLink Href="/profile">
            <MudCard>
                <MudCardContent>
                    <MudGrid>
                        <MudItem xs="12" sm="6" md="4">
                            <MudAvatar Src="path_to_your_avatar_image" Size="Size.Large" />
                        </MudItem>
                        <MudItem xs="12" sm="6" md="8">
                            <MudText Typo="Typo.h6">@profileModel.FirstName @profileModel.SecondName</MudText>
                            <MudText Typo="Typo.body2">Balance: @profileModel.Balance</MudText>
                        </MudItem>
                    </MudGrid>
                </MudCardContent>
            </MudCard>
        </MudNavLink>

        <MudNavLink Href="/events" Match="NavLinkMatch.Prefix">Events</MudNavLink>
            @* <MudNavLink Href="/" Match="NavLinkMatch.Prefix" @onclick="AddModey">Add Modey</MudNavLink> *@
        <MudNavLink Href="/logout">Logout</MudNavLink>

    </MudNavMenu>
}
else
{
    <MudButton Variant="Variant.Filled" Color="Color.Primary" Size="Size.Large" OnClick="NavigateToLogin">Sign In</MudButton>
    <MudButton Variant="Variant.Filled" Color="Color.Primary" Size="Size.Large" OnClick="NavigateToRegister">Sign Up</MudButton>
}



@code {

    [CascadingParameter] MudDialogInstance MudDialog { get; set; } = default!;

    [Parameter] public Guid? UserId { get; set; }

    [Parameter] public UserModel Model { get; set; } = new();

    private MudForm form = default!;

    private List<UserModel> Users { get; set; } = new List<UserModel>();

    private bool IsAuthenticated { get; set; }

    private ProfileModel profileModel;

    private async Task ReloadData()
    {
        profileModel = await profileService.Me();
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var authState = await authenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;
            IsAuthenticated = user.Identity.IsAuthenticated;

            var owners = await userService.GetUsers();
            Users.AddRange(owners);


            if (UserId != null)
            {
                var model = await userService.GetUser(UserId.Value);

                Model.Id = model.Id;
                Model.FirstName = model.FirstName;
                Model.SecondName = model.SecondName;
                Model.Email = model.Email;
                Model.Rating = model.Rating;
            }

            await ReloadData();
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }
    async Task Submit()
    {
        await form.Validate();
        if (form.IsValid)
        {
            MudDialog.Close(DialogResult.Ok(true));
        }
    }

    private void NavigateToLogin()
    {
        navigationManager.NavigateTo("/login");
    }

    private void NavigateToRegister()
    {
        navigationManager.NavigateTo("/register");
    }

    private void AddModey()
    {
        
    }

    void Cancel() => MudDialog.Cancel();
}
